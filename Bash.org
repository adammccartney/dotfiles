* Bash config

** .profile

~~/.profile~: executed by the command interpreter for login shells.
This file is not read by bash(1), if ~~/.bash_profile~ or ~~/.bash_login~
exists.
see ~/usr/share/doc/bash/examples/startup-files~ for examples.
the files are located in the bash-doc package.

the default umask is set in /etc/profile; for setting the umask
for ssh logins, install and configure the libpam-umask package.
umask 022


#+begin_src shell :tangle ./bash/.profile
  # if running bash
  if [ -n "$BASH_VERSION" ]; then
      # include .bashrc if it exists
      if [ -f "$HOME/.bashrc" ]; then
      . "$HOME/.bashrc"
      fi
  fi
#+end_src


** Path variable 

Set the PATH environment variable to include my ~$HOME/bin~ directory.

#+begin_src shell :tangle ./bash/.profile
  if [ -d "$HOME/bin" ] ; then
      PATH="$HOME/bin:$PATH"
  fi
 
  if [ -d "$HOME/.local/bin" ] ; then
      PATH="$HOME/.local/bin:$PATH"
  fi
#+end_src



** .bashrc

#+begin_src shell :tangle ./bash/.bashrc
 # ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# point to a populated terminfo database and explicitly set term
export TERMINFO=/usr/share/terminfo
export TERM=tmux-256color

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# Custom prompt that displays the time in upper left corner
# along with a shortened path name on the left hand side, 
# i.e. it only displays the name of the topmost path dir

PS1="\[\033[s\033[0;0H\033[0;49m\033[K\033[1;33m\t\033[u\]<\u@\h \W>\$"


# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1="<\u@\h \W>\$"
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi


# Function definitions.
if [ -f ~/.bash_functions ]; then
  . ~/.bash_functions
fi

# Pvars.
if [ -f ~/.bash_pvars ]; then
  . ~/.bash_pvars
fi


if [ -d "$HOME/bin" ] ; then
    PATH="HOME/bin:$PATH"
fi

# tmp var
if [ -f ~/.bashvar ] ; then
    . ~/.bashvar
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash


# set up environment variables for compiling from source in $HOME/.local
export PATH=$HOME/.local/bin:$PATH
export C_INCLUDE_PATH=$HOME/.local/include
export CPLUS_INCLUDE_PATH=$HOME/.local/include
export LIBRARY_PATH=$HOME/.local/lib
export PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig

# This tells the run time linker where to find
# files installed in the home directory.
# WARNING: may cause issues if an officially installed package is looking for
# a library that is also installed on the system in a more holy manner.
export LD_LIBRARY_PATH=$HOME/.local/lib

# Set mail environment variable
MAIL=/var/mail/adam && export MAIL

# set realtime
export SOUND_CARD_IRQ=169

export PG_OF_PATH=$HOME/openFrameworks

export PATH=$PATH:/sbin:/opt/ghc/bin:/opt/riscv/bin

# temp variable for rehashing blog
export OLDPOSTS=/media/websites/content/music
export CONTENT=$HOME/Websites/admccartney/content
export STATIC=$HOME/Websites/admccartney/static
export NEWSHORTCODES=$HOME/Websites/admccartney/layouts/shortcodes
export NEWSOUNDS=$HOME/Websites/admccartney/static/sounds

source "$HOME/.cargo/env"

# Remote server variable
export REMOTE1=206.189.52.96
. "$HOME/.cargo/env"

# use vim keybindings
set -o vi
[ -f "/home/adam/.ghcup/env" ] && source "/home/adam/.ghcup/env" # ghcup-env

# git tools
. ~/git-completion.bash
. ~/git-prompt.sh
export GIT_PS1_SHOWDIRTYSTATE=1

PS1="\[\033[s\033[0;0H\033[0;49m\033[K\033[1;33m\t\033[u\]<\u@\h \W>\$"
export PS1='<\u@\h \W>$(__git_ps1 " (%s)")\$'

# virtualenv wrapper
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS=' -p /usr/bin/python3 '
export PROJECT_HOME=$HOME/.virtualenvs/venvs
source /usr/local/bin/virtualenvwrapper.sh

# source the cht.sh bashcompletion file
if [ -f ~/.bash.d/cht.sh ] ; then
    . ~/.bash.d/cht.sh
fi

# GOPATH
export GOPATH=$HOME/.local/go
export GOBIN=/usr/local/go/bin
export GOROOT=/usr/local/go
export PATH=$PATH:$GOPATH:$GOBIN

export myip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
#+end_src


** .bash_functions

Some functions that I tend to use

*** Custom Keyboard Bindings

Mostly just the one - rebind ctrl to caps lock ... because emacs.

#+begin_src shell :tangle ./bash/.bash_functions
  function swap_ctrl_caps () {
    XKBOPTIONS="ctrl:swapcaps"
    /usr/bin/setxkbmap -option $XKBOPTIONS
  }
#+end_src

#+begin_src shell :tangle ./bash/.bashrc
  # call the function to swap ctrl and capslock keys
  swap_ctrl_caps
#+end_src


#+begin_src shell :tangle ./bash/.bash_functions
# ~/.bash_functions: collection of command line functions


# Functions

ds () {
    echo "Disk Space Utilization For $HOSTNAME"
    df -h
}

hs () {
    echo "Home Space Utilzation For $USER"
    du -sh /home/*
}

extractLoxBin () {
    DISTDIR=/home/adam/.local/src/jlox/build/distributions
    TARGETDIR=${DISTDIR}
    tar -xf "${DISTDIR}/jlox.tar" -C "${TARGETDIR}"
}

function renameFilesRecursively () {

  SEARCH_PATH="$1"
  SEARCH="$2"
  REPLACE="$3"

  find ${SEARCH_PATH} -type f -name "*${SEARCH}*" | while read FILENAME ; do
      NEW_FILENAME="$(echo ${FILENAME} | sed -e "s/${SEARCH}/${REPLACE}/g")";
      mv "${FILENAME}" "${NEW_FILENAME}";
  done

}

function tmux_ns () {
    SESNAME="$1"
    tmux new-session -s $SESNAME -d
    tmux split-window -h
    tmux split-window -v
    tmux -2 attach-session -d 
}

function hello () {
    NAME="$1"
    echo "hello ${NAME}, how are you this evening?"
}

function containerip () {
   sudo docker inspect −−format '{{ .NetworkSettings.IPAddress }}' "$@"
}

function make_py3.8venv () {
    NAME="$1"
    #python3.8 -m venv "~/.virtualenvs/${NAME}"
    echo "~/.virtualenvs/${NAME}"
}

# list all ports currently listening
get_listening_ports () {
    sudo lsof -i -P -n | grep LISTEN 
}

function installed {
    cmd=$(command -v "${1}")

    [[ -n "${cmd}" ]] && [[ -f "${cmd}" ]]
    return ${?}
}

function die {
    >&2 echo "Fatal: ${@}"
    exit 1
}


function wi { 
    test -n "$1" && stat --printf "%F\n" $1
    }


function size {
    t=0
    test -d "$1" && for n in $(find $1 \
    -type f -name '*.py' -print | \
    xargs stat --printf "%s "); do ((t+=n)); done; echo $t; 
}


function weather { 
    curl -s --connect-timeout 3 -m 5 http://wttr.in/$1 
}


# Elastic search functions
if [ -f ~/.elastic_fun ]; then
    . ~/.elastic_fun
fi

function makeonchange () {
    while inotifywait -q . ; do echo -e '\n\n'; make; done
}

getmail () {
    mbsync -a
}
#+end_src

** .bash_aliases

Bunch of aliases used for alter egos.

#+begin_src shell :tangle ./bash/.bash_aliases
    # backup system
  alias backup="rsync -a --exclude=.cache --progress /home/adam /media/adam/adb/backup/home/adam"

  ## virtualenv alias
  #alias sv="source env/bin/activate"
  #
  ## IPython in a virtual env
  #alias ipy="python -c 'import IPython; IPython.terminal.ipapp.launch_new_instance()'"

  ## frog virtual env alias (for Scores/rill)
  #alias frogsv="source ~/Scores/frog/env/bin/activate"

  # plot virtual env 
  alias plot="source ~/.virtualenvs/plot/bin/activate"

  # chi virtual env (for Django webversion of iChing)
  alias chi="source ~/.virtualenvs/chi/bin/activate"

  # ni virtual env (for abjad scores)
  alias ni="source ~/.virtualenvs/ni/bin/activate"

  # plot virtual env (for learning & iChing)
  alias tt="source ~/.virtualenvs/tt/bin/activate"

  # call an iChing reading
  alias iching="python3 ~/Code/iChing/iChing/build/iching.py"

  # fl venv
  alias fl="source ~/.virtualenvs/fl/bin/activate"

  # jlox
  alias jlox="~/.local/src/jlox/build/distributions/jlox/bin/jlox"

  # python3.8
  alias py3.8="/usr/local/bin/python3.8"

  # python 3.10
  alias py310="/usr/local/bin/python3.10"

  # wagtail python 3.8
  alias wtpy38="source ~/.virtualenvs/wtpy38/bin/activate"

  # django: postgres python38
  alias pstgrsql="source ~/.virtualenvs/postgresql/bin/activate"

  # neovim
  alias vim="/usr/local/bin/nvim"
 
  # psql alias (hand compiled version on unix has the side effect of trying to
  # connect with another port. To get around this, we have to connect using the
  # -h flag and the socket that is specified by the debian system
  alias psql="psql -h /var/run/postgresql"

  alias DIZA="192.168.0.193"

  alias tlog="$HOME/Documents/traininglogs/training22.md"

  alias actenv="source venv/bin/activate"

  alias train="source $HOME/bin/train"

  alias !P="PS1='# '"
#+end_src
