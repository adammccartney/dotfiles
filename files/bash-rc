# -*- mode: sh -*-

[ -z "$TMUX" ] && export TERM=xterm-256color

export LC_ALL=C.UTF-8

export EDITOR=vi

if [ -d "$HOME/bin" ] ; then
    export PATH="$PATH:$HOME/bin"
fi

if [ -d "$HOME/.local/bin" ] ; then
    export PATH="$PATH:$HOME/.local/bin"
fi


export GOPATH="$HOME/go"
# Go Setup (temporary?)
if ! [[ $PATH =~ "$GOPATH/bin" ]]; then
    export PATH="$PATH:$GOPATH/bin"
fi

if ! [[ $PATH =~ ~/.cargo/bin ]]; then
    export PATH=$PATH:~/.cargo/bin
fi

if [ -f "$HOME/infrastructure/k8s/clusters/vsc/dev/config" ]; then
    export KUBECONFIG_VSC="$HOME/infrastructure/k8s/clusters/vsc/dev/config"
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoredups

# append to the history file, don't overwrite it
shopt -s histappend


# XDG dirs don't get set on headless systems, we rely on them below
if [[ -z ${XDG_CACHE_HOME} ]]; then
    export XDG_CACHE_HOME=${HOME}/.cache
fi

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000
HISTFILESIZE="$HISTSIZE"
HISTFILE="$XDG_CACHE_HOME/.bash_history"

if [[ ! -f ${HISTFILE} ]]; then
    touch ${HISTFILE}
fi

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [ -f ~/.bash_prompt ]; then
   . ~/.bash_prompt
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if [ -f ~/.bash_functions ]; then
  . ~/.bash_functions
fi

if [ -f ~/.bash_env ] ; then
    . ~/.bash_env
fi

if [ -f ~/.bash_fzf-keybindings ]; then
    . ~/.bash_fzf-keybindings
fi

if [ -f ~/.bash_git-completion ]; then
    . ~/.bash_git-completion
fi

# guix bash completion
GUIX_BASH_COMPLETION="/var/guix/profiles/per-user/root/current-guix/etc/bash_completion.d/guix"
if [ -f ${GUIX_BASH_COMPLETION} ]; then
    . ${GUIX_BASH_COMPLETION}
fi

# Guix Profile stuff
#if [ -z ${GUIX_PROFILE} ]; then # none active
guix_activate_profile  # try to activate host profile

# check whether we're setup to use nss-certs via guix, possibly set required variables
if [ -z ${GUIX_PROFILE+x} ] && [ -d "${GUIX_PROFILE}/etc/ssl/certs" ]; then
    export SSL_CERT_DIR="$GUIX_PROFILE/etc/ssl/certs"
    export SSL_CERT_FILE="$GUIX_PROFILE/etc/ssl/certs/ca-certificates.crt"
    export GIT_SSL_CAINFO="$SSL_CERT_FILE"
fi

# FIXME: this is a workaround for the fact that
# ~/.guix-home/setup-environment clobbers the $XCURSOR_PATH
# we're clobbering it here again ... two wrongs make a right I guess
# variable set by /etc/zzz-guix.sh
export XCURSOR_PATH="$GUIX_PROFILE/share/icons:/usr/lÃ¶ocal/share/icons:/usr/share/icons"


#guix_activate_root_profiles  # possibly activate anything we have in /opt/guix/extra-profiles

# use emacs keybindings
set -o emacs

# swap the control and caps key
swap_ctrl_caps

# idempotent kubectl setup
if command kubectl &> /dev/null; then
    source <(kubectl completion bash)
    complete -o default -F __start_kubectl k
fi


FZF="$(which fzf)"
if [[ "$FZF" =~ "guix" ]]; then
    FZF_BASH_COMPLETIONS="$(dirname $(dirname $(realpath "$FZF")))/etc/bash_completion.d/fzf"
    if [ -f "${FZF_BASH_COMPLETIONS}" ]; then
        . "${FZF_BASH_COMPLETIONS}"
    fi
fi


if [[ -f "~/vsc-repos.txt" ]]; then
    complete -W"`<~/vsc-repos.txt`" tu_gitlab_clone
fi

if [ -f "$HOME/.local/bin/virtualenvwrapper.sh" ]; then
    . $HOME/.local/bin/virtualenvwrapper.sh
fi

export WORKON_HOME="$HOME/.virtualenvs"

# plan9 in user space
        
PLAN9="$HOME"/src/github.com/9fans/plan9
export PLAN9
if [ -d $PLAN9 ]; then
    PATH=$PATH:$PLAN9/bin
    export PATH
fi


# Arm toolchain
if [ -d $HOME/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi/ ]; then
    export PATH="$PATH:$HOME/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi/bin"
fi

if [ -d $HOME/oxherding ]; then
    export PYTHONPATH=:/home/amccartn/oxherding
fi

##############
# OXHERD setup
##############

if [ -d "$HOME/Notes/markdown" ]; then
    export OXHERD_NOTES_DIR="$HOME/Notes/markdown"
fi
