#+TITLE: Emacs config

* Preface
Currently running a bit of a cowboy setup with a manually maintaned
packages.el file that pulls certain packages from git based on specific
digests and other from the package repositories using the emacs package
manager. It's bound to end in tears.

This approach to configuration is influenced very much by David Wilson
from system crafters. It is centered around literate programming and
functional package management.

* Startup Performance
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

  ;; init.el --- -*- lexical-binding: t; -*-

  ;; The default is 800 kilobytes. Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src

* Packages
** Old package managment with package.el
     
NOTE: tangle is disabled, chunk here for reference purposes
#+begin_src emacs-lisp 

  (make-directory (locate-user-emacs-file "local") :no-error)
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (add-to-list 'Load-path
               (format "~/.emacs.d/site-lisp/%s" emacs-version))
  (add-to-list 'load-path
               (format "~/.emacs.d/site-lisp/%s/lisp" emacs-version))
  (add-to-list 'load-path
               (format "~/.emacs.d/site-lisp/%s/etc" emacs-version))


  (add-to-list 'load-path 
               (format "~/.emacs.d/site-lisp/%s/dash" emacs-version))
  (add-to-list 'load-path 
               (format "~/.emacs.d/site-lisp/%s/transient/lisp" emacs-version))
  (add-to-list 'load-path 
               (format "~/.emacs.d/site-lisp/%s/with-editor" emacs-version))
  (add-to-list 'load-path 
               (format "~/.emacs.d/site-lisp/%s/magit/lisp" emacs-version))

  (with-eval-after-load 'info
    (info-initialize)
    (add-to-list 'Info-directory-list
                 (format "~/.emacs.d/site-lisp/%s/magit/Documentation/" emacs-version)))
               
  (load-file "~/.emacs.d/packages.el")
  (require 'autoloads)
  (setf package-enable-at-startup nil)
  (require 'use-package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

** Straight.el
Replacement for package.el. Functional package manager for emacs 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
;; bootstrap straight.el
   (defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage)) 
  
;; Emacs version >= 27
(setq package-enable-at-startup nil)
  
;; Use by default
(straight-use-package 'use-package)

;; Saves typing `:straight t` after every use-package expression  
(setq straight-use-package-by-default t)

;; Clean up unused repos with `straight-remove-unused-repos'
#+end_src
* Keep .emacs.d Clean
As seen on tv, basically moves any transitory files that are normally
plonked in the .emacs.d directory to another location
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering
  :straight t)

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src
* Update Load Path 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(push "~/.emacs.d/lisp" load-path)  
(require 'unannoy)
(require 'ad-mail)

#+end_src
* Default Coding System
use utf-8
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(set-default-coding-systems 'utf-8)
#+end_src
* Start server
  #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (server-start)
  #+end_src
* Keybindings
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(global-set-key (kbd "C-x k") #'kill-this-buffer)

#+end_src
* Global settings

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

;; Some global keybindings
(column-number-mode)
(global-display-line-numbers-mode t)

;; Global line width
(setq-default fill-column 80)

;;; auto-mode-alist entries
(add-to-list 'auto-mode-alist '("\\.mom$" . nroff-mode))
(add-to-list 'auto-mode-alist '("[._]bash.*" . shell-script-mode))
(add-to-list 'auto-mode-alist '("Cask" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("[Mm]akefile" . makefile-gmake-mode))
(add-to-list 'auto-mode-alist '("\\.mak$" . makefile-gmake-mode))
(add-to-list 'auto-mode-alist '("\\.make$" . makefile-gmake-mode))
#+end_src

* Fonts and Themes 
** Some custom emacs config 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/lisp/unannoy.el
;;; unannoy.el --- disable Emacs' annoying bits
;;; originally written by nullprogram (Chris Wellons)

;;; Code:

(setf backup-inhibited t
      auto-save-default nil
      auto-save-list-file-prefix (locate-user-emacs-file "local/saves")
      inhibit-startup-message t
      initial-scratch-message nil
      wdired-allow-to-change-permissions t
      echo-keystrokes 0.1
      delete-active-region nil
      disabled-command-function nil
      custom-file (make-temp-file "emacs-custom")
      large-file-warning-threshold 536870911
      gc-cons-threshold (* 1024 1024 32)
      vc-display-status nil
      ring-bell-function (lambda ()))

;; GUIs are for newbs
(menu-bar-mode -1)
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;; Too distracting
(blink-cursor-mode -1)

;; I never want to use this
(when (fboundp 'set-horizontal-scroll-bar-mode)
  (set-horizontal-scroll-bar-mode nil))

;; Do sensible clipboard things, please
(setf select-enable-clipboard nil
      select-enable-primary t
      mouse-drag-copy-region t
      mouse-yank-at-point t)
      
;; Lexical binding by default. Must be delayed since Emacs sets this
;; on its own to nil after initialization.
(run-at-time 0 nil (lambda ()
		     (setq-default lexical-binding t)))

;; Tabs suck
(setq-default indent-tabs-mode nil)

;; I hate typing
(defalias 'yes-or-no-p 'y-or-n-p)

;; Always use the one true encoding
(prefer-coding-system 'utf-8-unix)

;; Insert key is stupid
(define-key global-map [(insert)] nil)
(define-key global-map [(control insert)] 'overwrite-mode)

;; I hate hitting this by accident
(global-set-key (kbd "C-<up>") #'previous-line)
(global-set-key (kbd "C-<down>") #'next-line)

;; Magit is the only front-end I care about
(setf vc-handled-backends nil
      vc-follow-symlinks t)

;; Stop scrolling by huge leaps
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
      scroll-conservatively most-positive-fixnum
      scroll-preserve-screen-position t)

(provide 'unannoy)
#+end_src

** Fonts
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
;; Frames and fonts

(defvar my-preferred-fonts
  '("Noto Mono-10"
    "Inconsolata-12"))

(defun my-set-preferred-font (&optional frame)
  "Set the first available font from `my-preferred-fonts'."
  (catch 'done
    (with-selected-frame (or frame (selected-frame))
      (dolist (font my-preferred-fonts)
        (when (ignore-errors (x-list-fonts font))
          (set-frame-font font)
          (throw 'done nil))))))

(defun my-set-frame-fullscreen (&optional frame)
  (set-frame-parameter frame 'fullscreen 'fullheight))

(add-hook 'after-make-frame-functions #'my-set-preferred-font)
(add-hook 'after-make-frame-functions #'my-set-frame-fullscreen t)


;; Calendar and planner notification stuff
(appt-activate t)
#+end_src

** Themes 
sanityinc
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package color-theme-sanityinc-tomorrow
  :config
  (setf custom-safe-themes t)
  (color-theme-sanityinc-tomorrow-night)
  (global-hl-line-mode 1)
  (custom-set-faces
   '(cursor ((t :background "#eebb28")))))
#+end_src

** Set margins (center)
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package visual-fill-column
  :config
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t))
#+end_src
  

* Usability
** Dired
    
Use dired for searching directories 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(straight-use-package '(dired :type built-in))
(use-package dired
  :config
  (progn
    (add-hook 'dired-mode-hook #'toggle-truncate-lines)
    (setf dired-listing-switches "-alhG"
          dired-guess-shell-alist-user
          '(("\\.pdf\\'" "evince")
            ("\\(\\.ods\\|\\.xlsx?\\|\\.docx?\\|\\.csv\\)\\'" "libreoffice")
            ("\\(\\.png\\|\\.jpe?g\\)\\'" "qiv")
            ("\\.gif\\'" "animate")))))
#+end_src

** Evil
    
Evil mode get setup some vim style keybindings 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package paren
  :config (show-paren-mode))

(use-package rainbow-delimiters
  :defer t
  :init
  (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'ielm-mode-hook #'rainbow-delimiters-mode)
  :config
  (set-face-foreground 'rainbow-delimiters-depth-1-face "snow4")
  (setf rainbow-delimiters-max-face-count 1)
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground 'unspecified
                      :inherit 'error)
  (set-face-foreground 'rainbow-delimiters-depth-1-face "snow4"))


(use-package javadoc-lookup
  :defer t
  :bind ("C-h j" . javadoc-lookup)
  :config
  (ignore-errors
    (setf javadoc-lookup-cache-dir (locate-user-emacs-file "local/javadoc"))))

(use-package browse-url
  :defer t
  :init
  (setf url-cache-directory (locate-user-emacs-file "local/url"))
  :config
  (when (executable-find "firefox")
    (setf browse-url-browser-function #'browse-url-firefox)))
#+end_src

** Buffler
[[https://github.com/alphapapa/bufler.el][Buffler]] is a butler for buffers. Helps with organizing buffers according 
to a set of grouping rules.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package bufler
  :config
  (evil-collection-define-key 'normal 'bufler-list-mode-map
       (kbd "RET") 'bufler-list-buffer-switch
       (kbd "M-RET") 'bufler-list-buffer-peek
       "D" 'bufler-list-buffer-kill)
  (setf bufler-groups
        (bufler-defgroups
         ;; Subgroup collecting all named workspaces
         (group (auto-workspace))
         ;; Subgoup collecting buffers in a projectile project.
         (group (auto-projectile))
         (group
            ;; Group all 
          (group-or "Help/Info"
                     (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                     (mode-match "*Info*" (rx bos "info-"))))
         (group
          ;; Collect all special buffers
           (group-and "*Special*"
                      (name-match "**Special**"
                                  (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                      (lambda (buffer)
                        (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                             buffer)
                                    (funcall (mode-match "Dired" (rx bos "dired"))
                                             buffer)
                                    (funcall (auto-file) buffer))
                          "*Special*"))))
          ;; group remaining buffers by major mode
         (auto-mode))))
#+end_src
* Org
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

  (straight-use-package 'org)
  ;; Org mode
  (use-package org 
    :defer t
    :after org-roam 
    :config
    (add-hook 'org-mode-hook
              (lambda () (add-hook 'after-save-hook #'org-babel-tangle
                                   :append :local)))
    (setq org-todo-keywords
          '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))

    ;; org babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)
  
    ;; Capture templates
    (setq org-capture-templates
          '(("w" "Work Todo" entry (file+headline "~/Documents/org/Planner-mdw2022.org" "Tasks")
             "* TODO %?\n %i\n %a")
            ("h" "Home Todo" entry (file+headline "~/Documents/org/Planner-home2022.org" "Tasks")
             "* TODO %?\n %i\n %a")))
    (setq org-startup-folded "overview"))

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
  (add-to-list 'org-structure-template-alist '("yml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

** Org Roam

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 
  (use-package org-roam
    :ensure t
    :init 
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Notes/org-roam/")
    (org-roam-dailies-directory "journal/")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)
       ("b" "book notes" plain
        "\n*Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "project" plain 
        "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n** Dates\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: Project\n")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n c" . org-roam-dailies-capture-today)
           :map org-mode-map
           (("C-c n i" . org-roam-node-insert)
           ("C-M-i" . completion-at-point)))
    :config
    (org-roam-db-autosync-mode)
    (org-roam-setup))
#+end_src

** Presentations
*** org-present
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

;; center the screen

(defun ad/org-present-start ()
;; Tweak font sizes
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.0) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))
  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun ad/org-present-end ()
  (visual-fill-column-mode 0)
  (visual-line-mode 0))
  
(use-package org-present
  :config
  (add-hook 'org-present-mode-hook 'ad/org-present-start)
  (add-hook 'org-present-mode-quit-hook 'ad/org-present-end))
#+end_src

*** tree-slide
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package org-tree-slide)
    #+end_src
* Documentation 
*** markdown 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package markdown-mode
  :defer t
  :mode ("\\.md$" "\\.markdown$" "vimperator-.+\\.tmp$")
  :config
  (add-hook 'markdown-mode-hook
            (lambda ()
              (remove-hook 'fill-nobreak-predicate
                           'markdown-inside-link-p t)))
  (setf sentence-end-double-space nil
        markdown-indent-on-enter nil
        markdown-command
        "pandoc -f markdown -t html5 -s --self-contained --smart"))

#+end_src

* Completion & searching 
** ivy 
Includes a number of minimalist completion tools that make life a bit easier.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src

** counsel
~M-x~ on steroids

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
         
#+end_src

** ctags
#+begin_src emacs-lisp
    
(use-package ctags
  :init
  (global-set-key (kbd "M-.") #'ctags-find)
  (global-set-key (kbd "M-?") #'ctags-find-reference))

#+end_src

** YASnippet
   #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
   (use-package yasnippet)
   #+end_src
** company
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package company
  :custom
  (company-idle-delay 0)
  (company-minimum-prefix-length 1)
  (company-tooltip-align-annotations t)
  (company-dabbrev-downcase nil)
  (company-dabbrev-other-buffers t) ; search buffers with the same major mode
  :hook
  (dashboard-after-initialize . global-company-mode)
  :config
  (add-to-list 'company-begin-commands 'backwards-delete-char-untabify)
  

  ;; Show YASnippet snippets in company

  (defun fk/company-backend-with-yas (backend)
    "Add ':with company-yasnippet' to the given company backend."
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend)
                  backend
                (list backend))
              '(:with company-yasnippet))))

  (defun fk/company-smart-snippets (fn command &optional arg &rest _)
    "Do not show yasnippet candidates after dot."
    ;;Source:
    ;;https://www.reddit.com/r/emacs/comments/7dnbxl/how_to_temporally_filter_companymode_candidates/
    (unless (when (and (equal command 'prefix) (> (point) 0))
              (let* ((prefix (company-grab-symbol))
                     (point-before-prefix (if (> (- (point) (length prefix) 1) 0)
                                              (- (point) (length prefix) 1)
                                            1))
                     (char (buffer-substring-no-properties point-before-prefix (1+ point-before-prefix))))
                (string= char ".")))
      (funcall fn command arg)))

  ;; TODO: maybe show snippets at first?
  (defun fk/company-enable-snippets ()
    "Enable snippet suggestions in company by adding ':with
company-yasnippet' to all company backends."
    (interactive)
    (setq company-backends (mapcar 'fk/company-backend-with-yas company-backends))
    (advice-add 'company-yasnippet :around 'fk/company-smart-snippets))

  (fk/company-enable-snippets))
#+end_src

** lsp
Haven't really got this running so smoothly yet, find nvim's lsp stuff
works a bit better out of the box. 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package lsp-mode
  :init 
  (setq lsp-keymap-prefix "C-c l")
  :hook ((python-mode . lsp)
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

(use-package lsp-ui
  :after lsp
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-sideline-enable t)
  (lsp-ui-doc-show))

(use-package lsp-ivy)

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
 (setq which-key-idle-delay 1))
#+end_src

*** Language Servers
**** pyright

     #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
     (use-package lsp-pyright
       :after lsp-mode
       :custom
       (lsp-pyright-auto-import-completions nil)
       (lsp-pyright-typechecking-mode "off")
       :ensure t
       :hook (python-mode . (lambda ()
                              (require 'lsp-pyright)
                              (lsp))))
     #+end_src

* Development
** projectile

Project organization 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
 (use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/.local/src")
    (setq projectile-project-search-path '("~/.local/src" "~/Code" "~/.local/src/mdw")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** Git
   
** Magit
Very nice interface for Git.    

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package magit
  :straight t
  :init (if (not (boundp 'project-switch-commands)) 
        (setq project-switch-commands nil))
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

;;(use-package lsp-pyright
;;  :straight t 
;;  :hook (python-mode . (lambda ()
;;                          (require 'lsp-pyright)
;;                          (lsp)))) ;; or lsp-deferred

#+end_src

** Languages 
   
Various packages and dependencies that make working with certain
languages a bit easier.
   
*** lisp
 
Add slime that uses the sbcl 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package slime
  :init 
  (setq inferior-lisp-program "/usr/local/bin/sbcl"))
#+end_src

*** python
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package python-mode
  :mode "\\.py\\'"
  :hook (python-mode . lsp-deferred)
  :config
  (setq python-indent-level 4))
#+end_src

**** pyvenv
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 
(use-package pyvenv
 :after python-mode)
#+end_src

*** typescript
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
  
(defun dw/set-js-indentation ()
  (setq js-indent-level 2)
  (setq evil-shift-width js-indent-level)
  (setq-default tab-width 2))

(use-package js2-mode
  :mode "\\.jsx?\\'"
  :config
  ;; Use js2-mode for Node scripts
  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil)

  ;; Set up proper indentation in JavaScript and JSON files
  (add-hook 'js2-mode-hook #'dw/set-js-indentation)
  (add-hook 'json-mode-hook #'dw/set-js-indentation))
#+end_src

*** scheme 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

(use-package geiser
  :straight t
  :config
  (setq geiser-default-implementation 'guile)
  (setq geiser-active-implementations '(guile))
  (setq geiser-implementations-alist '(((regexp "\\.scm$") guile)))
  (setq geiser-guile-binary "/usr/bin/guile"))

(use-package geiser-guile
  :straight t)
#+end_src

Add guile and mit scheme
#+begin_src conf :tangle .config/debian/manifests/interpreters
guile-3.0
mit-scheme
#+end_src


*** Clojure
Just starting to experiment with the lispy goodness of clojure
#+begin_src conf :tangle .config/debian/manifests/interpreters
clojure
#+end_src

**** Installing 

**** Clojure mode
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package clojure-mode
    :ensure t
    :mode (("\\.clj\\'" . clojure-mode)
            ("\\.edn\\'" . clojure-mode))
    :init
    (add-hook 'clojure-mode-hook #'subword-mode)           
    (add-hook 'clojure-mode-hook #'smartparens-mode)       
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'clojure-mode-hook #'eldoc-mode)) 
    #+end_src

**** Cider 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package cider
    :ensure t
    :defer t)
#+end_src


**** Leiningen
project generator for clojure 
#+begin_src conf :tangle .config/debian/manifests/languagetools
leiningen
#+end_src


*** c
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package cc-mode
  :defer t
  :init
  (defun skeeto/c-hook ()
    (setf c-basic-offset 4)
    (c-set-offset 'case-label '+)
    (c-set-offset 'access-label '/)
    (c-set-offset 'label '/))
  :config
  (progn
    (define-key java-mode-map (kbd "C-x I") 'add-java-import)
    (add-hook 'c-mode-hook #'skeeto/c-hook)
    (add-hook 'c++-mode-hook #'skeeto/c-hook)
    (add-to-list 'c-default-style '(c-mode . "k&r"))
    (add-to-list 'c-default-style '(c++-mode . "k&r"))))

#+end_src

*** Go
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package go-mode
  :hook (go-mode . lsp-deferred))
#+end_src

*** x86 assembly 
#+begin_src emacs-lisp
    
(use-package nasm-mode
  :defer t
  :mode ("\\.nasm$" "\\.asm$" "\\.s$")
  :config
  (add-hook 'nasm-mode-hook (lambda () (setf indent-tabs-mode t))))
  
(use-package asm-mode
  :defer t
  :init
  (add-hook 'asm-mode-hook (lambda () (setf indent-tabs-mode t
                                            tab-always-indent t))))

#+end_src

*** yaml
Everyone's favorite...
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package yaml-mode
       :mode "\\.ya?ml\\'")
    #+end_src
    
** Productivity
*** Flycheck
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package flycheck
      :defer t
      :hook (lsp-mode . flycheck-mode))
    #+end_src
*** Smart Parens 
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package smartparens
      :hook (prog-mode . smartparens-mode))
    #+end_src
** Editing Configuration
*** Use spaces instead of tabs for indentation 
   #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
   (setq-default indent-tabs-mode nil)
   #+end_src
* Applications
** eshell
#+begin_src emacs-lisp
 
(use-package eshell
  :defer t
  :bind ([f1] . eshell-as)
  :init
  (setf eshell-directory-name (locate-user-emacs-file "local/eshell"))
  :config
  (add-hook 'eshell-mode-hook ; Bad, eshell, bad!
            (lambda ()
              (define-key eshell-mode-map (kbd "<f1>") #'quit-window))))
#+end_src
:q
