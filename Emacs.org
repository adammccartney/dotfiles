#+TITLE: Emacs config

* Preface
Currently running a bit of a cowboy setup with a manually maintaned
packages.el file that pulls certain packages from git based on specific
digests and other from the package repositories using the emacs package
manager. It's bound to end in tears.

This approach to configuration is influenced very much by David Wilson
from system crafters. It is centered around literate programming and
functional package management.

* Startup Performance
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

  ;; init.el --- -*- lexical-binding: t; -*-

  ;; The default is 800 kilobytes. Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src

* Packages
** Old package managment with package.el
     
NOTE: tangle is disabled, chunk here for reference purposes
#+begin_src emacs-lisp 

  (make-directory (locate-user-emacs-file "local") :no-error)
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (add-to-list 'Load-path
               (format "~/.emacs.d/site-lisp/%s" emacs-version))
  (add-to-list 'load-path
               (format "~/.emacs.d/site-lisp/%s/lisp" emacs-version))
  (add-to-list 'load-path
               (format "~/.emacs.d/site-lisp/%s/etc" emacs-version))


  (add-to-list 'load-path 
               (format "~/.emacs.d/site-lisp/%s/dash" emacs-version))
  (add-to-list 'load-path 
               (format "~/.emacs.d/site-lisp/%s/transient/lisp" emacs-version))
  (add-to-list 'load-path 
               (format "~/.emacs.d/site-lisp/%s/with-editor" emacs-version))
  (add-to-list 'load-path 
               (format "~/.emacs.d/site-lisp/%s/magit/lisp" emacs-version))

  (with-eval-after-load 'info
    (info-initialize)
    (add-to-list 'Info-directory-list
                 (format "~/.emacs.d/site-lisp/%s/magit/Documentation/" emacs-version)))
               
  (load-file "~/.emacs.d/packages.el")
  (require 'autoloads)
  (setf package-enable-at-startup nil)
  (require 'use-package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

** Straight.el
Replacement for package.el. Functional package manager for emacs 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  ;; bootstrap straight.el
     (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage)) 

  ;; Emacs version >= 27
  (setq package-enable-at-startup nil)

  ;; Use by default
  (straight-use-package 'use-package)

  ;; Saves typing `:straight t` after every use-package expression  
  (setq straight-use-package-by-default t)

  ;; Clean up unused repos with `straight-remove-unused-repos'

  ;; grab the right version of org
  (straight-use-package 'org)
#+end_src
* Keep .emacs.d Clean
As seen on tv, basically moves any transitory files that are normally
plonked in the .emacs.d directory to another location
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering
  :straight t)

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src
* Update Load Path 

** mu4e requires the following dependencies
#+begin_src conf :tangle .config/debian/manifests/dependencies
libgmime-3.0-dev
libxapian-dev
#+end_src

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (push "~/.emacs.d/lisp" load-path)  
  (require 'unannoy)
  (require 'ad-mail)
  (require 'mu4e)
#+end_src
* Default Coding System
use utf-8
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(set-default-coding-systems 'utf-8)
#+end_src
* Start server
  #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (server-start)
  #+end_src
* Keybindings
<<<<<<< Updated upstream

** Rebind the universal argument key 
Evil is using C-u for scrolling, so this needs to be rebound to another variable.
=======
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(global-set-key (kbd "C-x k") #'kill-this-buffer)
#+end_src

** Rebind universal argument key

>>>>>>> Stashed changes
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
* Global settings

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

;; Some global keybindings
(column-number-mode)
(global-display-line-numbers-mode t)

;; Global line width
(setq-default fill-column 80)

;;; auto-mode-alist entries
(add-to-list 'auto-mode-alist '("\\.mom$" . nroff-mode))
(add-to-list 'auto-mode-alist '("[._]bash.*" . shell-script-mode))
(add-to-list 'auto-mode-alist '("Cask" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("[Mm]akefile" . makefile-gmake-mode))
(add-to-list 'auto-mode-alist '("\\.mak$" . makefile-gmake-mode))
(add-to-list 'auto-mode-alist '("\\.make$" . makefile-gmake-mode))
#+end_src

* User Interface
** unannoy 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/lisp/unannoy.el
  ;;; unannoy.el --- disable Emacs' annoying bits
  ;;; originally written by nullprogram (Chris Wellons)

  ;;; Code:
  (setf backup-inhibited t
        auto-save-default nil
        auto-save-list-file-prefix (locate-user-emacs-file "local/saves")
        inhibit-startup-message t
        initial-scratch-message nil
        wdired-allow-to-change-permissions t
        echo-keystrokes 0.1
        delete-active-region nil
        disabled-command-function nil
        custom-file (make-temp-file "emacs-custom")
        large-file-warning-threshold 536870911
        gc-cons-threshold (* 1024 1024 32)
        vc-display-status nil
        ring-bell-function (lambda ()))

  ;; GUIs are for newbs
  (menu-bar-mode -1)
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  ;; Too distracting
  (blink-cursor-mode -1)

  ;; I never want to use this
  (when (fboundp 'set-horizontal-scroll-bar-mode)
    (set-horizontal-scroll-bar-mode nil))

  ;; Do sensible clipboard things, please
  (setf select-enable-clipboard nil
        select-enable-primary t
        mouse-drag-copy-region t
        mouse-yank-at-point t)

  ;; Lexical binding by default. Must be delayed since Emacs sets this
  ;; on its own to nil after initialization.
  (run-at-time 0 nil (lambda ()
                       (setq-default lexical-binding t)))

  ;; Tabs suck
  (setq-default indent-tabs-mode nil)

  ;; I hate typing
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Always use the one true encoding
  (prefer-coding-system 'utf-8-unix)

  ;; Insert key is stupid
  (define-key global-map [(insert)] nil)
  (define-key global-map [(control insert)] 'overwrite-mode)

  ;; I hate hitting this by accident
  (global-set-key (kbd "C-<up>") #'previous-line)
  (global-set-key (kbd "C-<down>") #'next-line)

  ;; Magit is the only front-end I care about
  (setf vc-handled-backends nil
        vc-follow-symlinks t)

  ;; Stop scrolling by huge leaps
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
        scroll-conservatively most-positive-fixnum
        scroll-preserve-screen-position t)

  (provide 'unannoy)
#+end_src

* Look and feel
** Theme 

Going to try out these snazzy looking doom themes.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package spacegray-theme
    :defer t)

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-nord t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; treemacs 
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src

sanityinc was the theme that I had been using, leaving it here for a minute.
#+begin_src emacs-lisp 
  (use-package color-theme-sanityinc-tomorrow
    :config
    (setf custom-safe-themes t)
    (color-theme-sanityinc-tomorrow-night)
    (global-hl-line-mode 1)
    (custom-set-faces
     '(cursor ((t :background "#eebb28")))))
#+end_src

** Font

This function needs to run after the doom-theme has been loaded
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (custom-set-faces
   `(mode-line ((t (:background ,(doom-color 'dark-violet)))))
   `(font-lock-comment-face ((t (:foreground ,(doom-color 'base6))))))
#+end_src



#+begin_src emacs-lisp

  ;; Frames and fonts
  ;; currently disabled

  (defvar my-preferred-fonts
    '("Noto Mono-10"
      "Inconsolata-12"))

  (defun my-set-preferred-font (&optional frame)
    "Set the first available font from `my-preferred-fonts'."
    (catch 'done
      (with-selected-frame (or frame (selected-frame))
        (dolist (font my-preferred-fonts)
          (when (ignore-errors (x-list-fonts font))
            (set-frame-font font)
            (throw 'done nil))))))

  (defun my-set-frame-fullscreen (&optional frame)
    (set-frame-parameter frame 'fullscreen 'fullheight))

  (add-hook 'after-make-frame-functions #'my-set-preferred-font)
  (add-hook 'after-make-frame-functions #'my-set-frame-fullscreen t)

#+end_src

** Mode line

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
      (use-package all-the-icons
        :if (display-graphic-p))

      ;; You must run (all-the-icons-install-fonts) one time after installing
      ;; this package
      (use-package minions
        :hook (doom-modeline-mode . minions-mode))

      (use-package doom-modeline
        :after eshell
        :hook (after-init . doom-modeline-init)
        :custom-face
        (mode-line ((t (:height 0.85))))
        (mode-line-intactive ((t (:height 0.85))))
        :custom
        (doom-modeline-height 15)
        (doom-modeline-bar-width 6)
        (doom-modeline-lsp t)
        (doom-modeline-github nil)
        (doom-modeline-mu4e t)
        (doom-modeline-irc nil)
        (doom-modeline-persp-name nil)
        (doom-modeline-buffer-file.name-style 'truncate-except-project)
        (doom-modeline-major-mode-icon nil))
#+end_src


** Calender and planner notification stuff
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

  ;; Calendar and planner notification stuff
  (appt-activate t)
#+end_src

** Set margins (center)
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package visual-fill-column
  :config
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t))
#+end_src
  
* Usability
** Dired
    
Use dired for searching directories 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package all-the-icons-dired)

  (straight-use-package '(dired :type built-in))
  (use-package dired
    :config
    (progn
      (add-hook 'dired-mode-hook #'toggle-truncate-lines)
      (setf dired-listing-switches "-alhG"
            dired-guess-shell-alist-user
            '(("\\.pdf\\'" "evince")
              ("\\(\\.ods\\|\\.xlsx?\\|\\.docx?\\|\\.csv\\)\\'" "libreoffice")
              ("\\(\\.png\\|\\.jpe?g\\)\\'" "qiv")
              ("\\.gif\\'" "animate")))))
#+end_src

** Evil
    
Evil mode get setup some vim style keybindings 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package paren
    :config (show-paren-mode))

  (use-package rainbow-delimiters
    :defer t
    :init
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'ielm-mode-hook #'rainbow-delimiters-mode)
    :config
    (set-face-foreground 'rainbow-delimiters-depth-1-face "snow4")
    (setf rainbow-delimiters-max-face-count 1)
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground 'unspecified
                        :inherit 'error)
    (set-face-foreground 'rainbow-delimiters-depth-1-face "snow4"))

  (use-package rainbow-mode
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           js2-mode))


  (use-package javadoc-lookup
    :defer t
    :bind ("C-h j" . javadoc-lookup)
    :config
    (ignore-errors
      (setf javadoc-lookup-cache-dir (locate-user-emacs-file "local/javadoc"))))

  (use-package browse-url
    :defer t
    :init
    (setf url-cache-directory (locate-user-emacs-file "local/url"))
    :config
    (when (executable-find "firefox")
      (setf browse-url-browser-function #'browse-url-firefox)))
#+end_src

** Buffler
[[https://github.com/alphapapa/bufler.el][Buffler]] is a butler for buffers. Helps with organizing buffers according 
to a set of grouping rules.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package bufler
    :disabled
    :config
    (evil-collection-define-key 'normal 'bufler-list-mode-map
         (kbd "RET") 'bufler-list-buffer-switch
         (kbd "M-RET") 'bufler-list-buffer-peek
         "D" 'bufler-list-buffer-kill)
    (setf bufler-groups
          (bufler-defgroups
           ;; Subgroup collecting all named workspaces
           (group (auto-workspace))
           ;; Subgoup collecting buffers in a projectile project.
           (group (auto-projectile))
           (group
              ;; Group all 
            (group-or "Help/Info"
                       (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                       (mode-match "*Info*" (rx bos "info-"))))
           (group
            ;; Collect all special buffers
             (group-and "*Special*"
                        (name-match "**Special**"
                                    (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                        (lambda (buffer)
                          (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                               buffer)
                                      (funcall (mode-match "Dired" (rx bos "dired"))
                                               buffer)
                                      (funcall (auto-file) buffer))
                            "*Special*"))))
            ;; group remaining buffers by major mode
           (auto-mode))))
#+end_src
* Org
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

  ;; Org mode
  (use-package org 
    :defer t
    :after (org-roam ob-go) 
    :custom
    (org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    :config
    (add-hook 'org-mode-hook
              (lambda () (add-hook 'after-save-hook #'org-babel-tangle
                                   :append :local)))

  ;; todo-keywords
    (setq org-todo-keywords
          '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
  ;; org babel

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (C . t)
       (scheme . t)
       (ruby . t)
       (go . t)
       (gnuplot . t)
       (dot . t)
       (shell . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

    (setq org-refile-targets '((nil :maxlevel . 1)
                           (org-agenda-files :maxlevel . 1)))

    ;; Capture templates
    (setq org-capture-templates
          '(("w" "Work Todo" entry (file+headline "~/Documents/org/Planner-mdw2022.org" "Tasks")
             "* TODO %?\n %i\n %a")
            ("h" "Home Todo" entry (file+headline "~/Documents/org/Planner-home2022.org" "Tasks")
             "* TODO %?\n %i\n %a")))
    (setq org-startup-folded "overview"))

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("dot" . "src dot"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("gnpl" . "src gnuplot"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
  (add-to-list 'org-structure-template-alist '("krc" . "src C"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("rb" . "src ruby"))
  (add-to-list 'org-structure-template-alist '("scm" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
  (add-to-list 'org-structure-template-alist '("yml" . "src yaml"))

#+end_src

** Org Roam

This is a bit of a hack for getting the org-roam-node-list function to work.
Currently there seems to be a problem with the way autoload works with org-roam
functions. We need the org-roam-node-list function in order to query the db for
all nodes that contain the Project tag. This chunk below just copies out the function
verbatim and calls it at runtime rather than trying to use the missing byte-compiled
version.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 
  (defun my/org-roam-node-list ()
    "Return all nodes stored in the database as a list of `org-roam-node's."
    (let ((rows (org-roam-db-query
                 "SELECT
    id,
    file,
    filetitle,
    \"level\",
    todo,
    pos,
    priority ,
    scheduled ,
    deadline ,
    title,
    properties ,
    olp,
    atime,
    mtime,
    '(' || group_concat(tags, ' ') || ')' as tags,
    aliases,
    refs
  FROM
    (
    SELECT
      id,
      file,
      filetitle,
      \"level\",
      todo,
      pos,
      priority ,
      scheduled ,
      deadline ,
      title,
      properties ,
      olp,
      atime,
      mtime,
      tags,
      '(' || group_concat(aliases, ' ') || ')' as aliases,
      refs
    FROM
      (
      SELECT
        nodes.id as id,
        nodes.file as file,
        nodes.\"level\" as \"level\",
        nodes.todo as todo,
        nodes.pos as pos,
        nodes.priority as priority,
        nodes.scheduled as scheduled,
        nodes.deadline as deadline,
        nodes.title as title,
        nodes.properties as properties,
        nodes.olp as olp,
        files.atime as atime,
        files.mtime as mtime,
        files.title as filetitle,
        tags.tag as tags,
        aliases.alias as aliases,
        '(' || group_concat(RTRIM (refs.\"type\", '\"') || ':' || LTRIM(refs.ref, '\"'), ' ') || ')' as refs
      FROM nodes
      LEFT JOIN files ON files.file = nodes.file
      LEFT JOIN tags ON tags.node_id = nodes.id
      LEFT JOIN aliases ON aliases.node_id = nodes.id
      LEFT JOIN refs ON refs.node_id = nodes.id
      GROUP BY nodes.id, tags.tag, aliases.alias )
    GROUP BY id, tags )
  GROUP BY id")))
      (cl-loop for row in rows
               append (pcase-let* ((`(,id ,file ,file-title ,level ,todo ,pos ,priority ,scheduled ,deadline
                                          ,title ,properties ,olp ,atime ,mtime ,tags ,aliases ,refs)
                                    row)
                                   (all-titles (cons title aliases)))
                        (mapcar (lambda (temp-title)
                                  (org-roam-node-create :id id
                                                        :file file
                                                        :file-title file-title
                                                        :file-atime atime
                                                        :file-mtime mtime
                                                        :level level
                                                        :point pos
                                                        :todo todo
                                                        :priority priority
                                                        :scheduled scheduled
                                                        :deadline deadline
                                                        :title temp-title
                                                        :aliases aliases
                                                        :properties properties
                                                        :olp olp
                                                        :tags tags
                                                        :refs refs))
                                all-titles)))))
#+end_src

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 

      (defun my/org-roam-filter-by-tag (tag-name)
        (lambda (node)
          (member tag-name (org-roam-node-tags node))))

      (defun my/org-roam-list-notes-by-tag (tag-name)
        (mapcar #'org-roam-node-file
                (seq-filter
                 (my/org-roam-filter-by-tag tag-name)
                 (my/org-roam-node-list))))

      (defun my/org-roam-refresh-agenda-list ()
        (interactive)
        (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))


      (use-package org-roam
        :demand t
        :straight t
        :init 
        (setq org-roam-v2-ack t)
        :custom
        (org-roam-directory "~/Notes/org-roam/")
        (org-roam-dailies-directory "journal/")
        (org-roam-completion-everywhere t)
        (org-roam-capture-templates
         '(("d" "default" plain
            "%?"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n")
            :unnarrowed t)
           ("b" "book notes" plain
            "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n")
            :unnarrowed t)
           ("p" "project" plain 
            "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n** Dates\n\n"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n#+filetags: Project\n")
            :unnarrowed t)))
        (org-roam-dailies-capture-templates
         '(("d" "default" plain 
            "\n* Thanks\n\n %?\n\n* WorkingOn\n\n* WorkingTowards\n\n* Excited About\n\n* Woes\n\n* Ideas\n\n* Housekeeping\n\n* Family Planning\n\n* Thanks"
            :if-new (file+head "%<%Y-%m-%d>.org"
                               "#+title: %<%Y-%m-%d>\n")
            :unnarrowed t)))
        :bind (("C-c n l" . org-roam-buffer-toggle)
               ("C-c n f" . org-roam-node-find)
               ("C-c n c" . org-roam-dailies-capture-today)
               :map org-mode-map
               (("C-c n i" . org-roam-node-insert)
               ("C-M-i" . completion-at-point)))
        :config
        (org-roam-db-autosync-mode)
        (my/org-roam-refresh-agenda-list))
#+end_src

** Presentations
*** org-present
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

;; center the screen

(defun ad/org-present-start ()
;; Tweak font sizes
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.0) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))
  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun ad/org-present-end ()
  (visual-fill-column-mode 0)
  (visual-line-mode 0))
  
(use-package org-present
  :config
  (add-hook 'org-present-mode-hook 'ad/org-present-start)
  (add-hook 'org-present-mode-quit-hook 'ad/org-present-end))
#+end_src

*** tree-slide
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package org-tree-slide)
    #+end_src

** graphviz
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package graphviz-dot-mode
    :ensure t
    :config
    (setq graphviz-dot-indent-width 4))
#+end_src


* Chat
** irc
Basic erc setup
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package erc
    :commands erc
    :config
    (setq
     erc-server "irc.libera.chat"
     erc-nick "amccart"
     erc-user-full-name "Adam McCartney"
     erc-track-shorten-start 8
     erc-auto-join-channels '(("irc.libera.chat" "#emacs"))
     erc-kill-buffer-on-part t
     erc-auto-query 'bury
     erc-fill-function 'erc-fill-static
     erc-fill-static-center 20
     erc-track-exclude '("#emacs")
     erc-track-exclude-types '("JOIN" "NICK" "QUIT" "MODE" "AWAY")
     erc-track-exclude-server-buffer t))
#+end_src
* Documentation 
*** markdown 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package markdown-mode
  :defer t
  :mode ("\\.md$" "\\.markdown$" "vimperator-.+\\.tmp$")
  :config
  (add-hook 'markdown-mode-hook
            (lambda ()
              (remove-hook 'fill-nobreak-predicate
                           'markdown-inside-link-p t)))
  (setf sentence-end-double-space nil
        markdown-indent-on-enter nil
        markdown-command
        "pandoc -f markdown -t html5 -s --self-contained --smart"))

#+end_src

* Completion & searching 
** ivy 
Includes a number of minimalist completion tools that make life a bit easier.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src

** counsel
~M-x~ on steroids

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
         
#+end_src

** ctags
#+begin_src emacs-lisp
    
(use-package ctags
  :init
  (global-set-key (kbd "M-.") #'ctags-find)
  (global-set-key (kbd "M-?") #'ctags-find-reference))

#+end_src

** YASnippet
   #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
   (use-package yasnippet)
   #+end_src
** company
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package company
  :custom
  (company-idle-delay 0)
  (company-minimum-prefix-length 1)
  (company-tooltip-align-annotations t)
  (company-dabbrev-downcase nil)
  (company-dabbrev-other-buffers t) ; search buffers with the same major mode
  :hook
  (dashboard-after-initialize . global-company-mode)
  :config
  (add-to-list 'company-begin-commands 'backwards-delete-char-untabify)
  

  ;; Show YASnippet snippets in company

  (defun fk/company-backend-with-yas (backend)
    "Add ':with company-yasnippet' to the given company backend."
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend)
                  backend
                (list backend))
              '(:with company-yasnippet))))

  (defun fk/company-smart-snippets (fn command &optional arg &rest _)
    "Do not show yasnippet candidates after dot."
    ;;Source:
    ;;https://www.reddit.com/r/emacs/comments/7dnbxl/how_to_temporally_filter_companymode_candidates/
    (unless (when (and (equal command 'prefix) (> (point) 0))
              (let* ((prefix (company-grab-symbol))
                     (point-before-prefix (if (> (- (point) (length prefix) 1) 0)
                                              (- (point) (length prefix) 1)
                                            1))
                     (char (buffer-substring-no-properties point-before-prefix (1+ point-before-prefix))))
                (string= char ".")))
      (funcall fn command arg)))

  ;; TODO: maybe show snippets at first?
  (defun fk/company-enable-snippets ()
    "Enable snippet suggestions in company by adding ':with
company-yasnippet' to all company backends."
    (interactive)
    (setq company-backends (mapcar 'fk/company-backend-with-yas company-backends))
    (advice-add 'company-yasnippet :around 'fk/company-smart-snippets))

  (fk/company-enable-snippets))
#+end_src


** Dap Mode
Emacs Debug Adapter Protocol aka DAP Mode means we can debug programs. Pfff...what sort of a
shoddy developer needs a debugger, eh?!

The following config is from https://github.com/neppramod/java_emacs/blob/master/emacs-configuration.org

Below we will integrate dap-mode with dap-hydra. Dap-hydra shows keys you can use to enable various
options and jump through code at runtime. After we install dap-mode we will also install dap-java.

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package dap-mode
  :ensure t
  :after (lsp-mode)
  :functions dap-hydra/nil
  :config
  (require 'dap-java)
  :bind (:map lsp-mode-map
         ("<f5>" . dap-debug)
         ("M-<f5>" . dap-hydra))
  :hook ((dap-mode . dap-ui-mode)
    (dap-session-created . (lambda (&_rest) (dap-hydra)))
    (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))

#+end_src

** Treemacs
Treemacs provides UI elements used for LSP UI. M-9 shows error list. 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  :ensure t
  :commands lsp-treemacs-errors-list
  :bind (:map lsp-mode-map
         ("M-9" . lsp-treemacs-errors-list)))

(use-package treemacs
  :ensure t
  :commands (treemacs)
  :after (lsp-mode))  
#+end_src


*** Treemacs evil
We are of course evil
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package treemacs-evil)
#+end_src


*** Treemacs projectile
This will quickly add projectile projects to Treemacs
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package treemacs-projectile)
#+end_src

** lsp
Haven't really got this running so smoothly yet, find nvim's lsp stuff
works a bit better out of the box. 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package lsp-mode
    :init 
    (setq lsp-keymap-prefix "C-c l")
    :hook ((python-mode . lsp)
           ((typescript-mode js2-mode web-mode) . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :after lsp
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t)
    (lsp-ui-doc-show))

  (use-package lsp-ivy)

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
   (setq which-key-idle-delay 1))
#+end_src

*** Language Servers
**** pyright

     #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
     (use-package lsp-pyright
       :after lsp-mode
       :custom
       (lsp-pyright-auto-import-completions nil)
       (lsp-pyright-typechecking-mode "off")
       :ensure t
       :hook (python-mode . (lambda ()
                              (require 'lsp-pyright)
                              (lsp))))
     #+end_src

* Development
** projectile

Project organization 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
 (use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/.local/src")
    (setq projectile-project-search-path '("~/.local/src" "~/Code" "~/.local/src/mdw")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** Git
   
** Magit
Very nice interface for Git.    

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package magit
  :straight t
  :init (if (not (boundp 'project-switch-commands)) 
        (setq project-switch-commands nil))
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

;;(use-package lsp-pyright
;;  :straight t 
;;  :hook (python-mode . (lambda ()
;;                          (require 'lsp-pyright)
;;                          (lsp)))) ;; or lsp-deferred

#+end_src

** Languages 
   
Various packages and dependencies that make working with certain
languages a bit easier.
   
*** gnuplot
We need to add a couple of packages related to gnuplot to get emacs to reconize it on the system.
I'm possibly adding redundency here, but who doesn't love a bit of redundency?!

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package gnuplot-mode)
  (use-package gnuplot)
#+end_src

*** html

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx|jsx\\)\\'"
    :config
    (setq-default web-mode-code-indent-ofset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))
#+end_src
*** lisp

To access some functions such as first or second in elisp, common lisp is required.
This is used by org-mode dot. Not sure if this will cause conflicts.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 
  (require 'cl-lib)
#+end_src
 
Add slime that uses the sbcl 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package slime
  :init 
  (setq inferior-lisp-program "/usr/local/bin/sbcl"))
#+end_src

*** python
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package python-mode
    :mode "\\.py\\'"
    :init
    (setq python-shell-interpreter "python3")
    :hook (python-mode . lsp-deferred)
    :config
    (setq python-indent-level 4))
#+end_src

**** pyvenv
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 
(use-package pyvenv
 :after python-mode)
#+end_src

**** pytest
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package python-test
    :after python-mode)
#+end_src

*** typescript
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
  
(defun dw/set-js-indentation ()
  (setq js-indent-level 2)
  (setq evil-shift-width js-indent-level)
  (setq-default tab-width 2))

(use-package js2-mode
  :mode "\\.jsx?\\'"
  :config
  ;; Use js2-mode for Node scripts
  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil)

  ;; Set up proper indentation in JavaScript and JSON files
  (add-hook 'js2-mode-hook #'dw/set-js-indentation)
  (add-hook 'json-mode-hook #'dw/set-js-indentation))
#+end_src

*** scheme 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

(use-package geiser
  :straight t
  :config
  (setq geiser-default-implementation 'guile)
  (setq geiser-active-implementations '(guile))
  (setq geiser-implementations-alist '(((regexp "\\.scm$") guile)))
  (setq geiser-guile-binary "/usr/bin/guile"))

(use-package geiser-guile
  :straight t)
#+end_src

Add guile and mit scheme
#+begin_src conf :tangle .config/debian/manifests/interpreters
guile-3.0
mit-scheme
#+end_src


*** Clojure
Just starting to experiment with the lispy goodness of clojure
#+begin_src conf :tangle .config/debian/manifests/interpreters
clojure
#+end_src

**** Installing 

**** Clojure mode
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package clojure-mode
    :ensure t
    :mode (("\\.clj\\'" . clojure-mode)
            ("\\.edn\\'" . clojure-mode))
    :init
    (add-hook 'clojure-mode-hook #'subword-mode)           
    (add-hook 'clojure-mode-hook #'smartparens-mode)       
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'clojure-mode-hook #'eldoc-mode)) 
    #+end_src

**** Cider 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package cider
    :ensure t
    :defer t)
#+end_src


**** Leiningen
project generator for clojure 
#+begin_src conf :tangle .config/debian/manifests/languagetools
leiningen
#+end_src


*** c
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package cc-mode
  :defer t
  :init
  (defun skeeto/c-hook ()
    (setf c-basic-offset 4)
    (c-set-offset 'case-label '+)
    (c-set-offset 'access-label '/)
    (c-set-offset 'label '/))
  :config
  (progn
    (define-key java-mode-map (kbd "C-x I") 'add-java-import)
    (add-hook 'c-mode-hook #'skeeto/c-hook)
    (add-hook 'c++-mode-hook #'skeeto/c-hook)
    (add-to-list 'c-default-style '(c-mode . "k&r"))
    (add-to-list 'c-default-style '(c++-mode . "k&r"))))

#+end_src

*** Go
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package go-mode
  :hook (go-mode . lsp-deferred))
#+end_src

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package ob-go)
#+end_src

*** x86 assembly 
#+begin_src emacs-lisp
    
(use-package nasm-mode
  :defer t
  :mode ("\\.nasm$" "\\.asm$" "\\.s$")
  :config
  (add-hook 'nasm-mode-hook (lambda () (setf indent-tabs-mode t))))
  
(use-package asm-mode
  :defer t
  :init
  (add-hook 'asm-mode-hook (lambda () (setf indent-tabs-mode t
                                            tab-always-indent t))))

#+end_src

*** yaml
Everyone's favorite...
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package yaml-mode
       :mode "\\.ya?ml\\'")
    #+end_src
    


*** java

    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
      (use-package lsp-java
        :after lsp-mode
        :ensure t
        :config (add-hook 'java-mode-hook 'lsp))

    #+end_src

    
** Productivity
*** Flycheck
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package flycheck
      :defer t
      :hook (lsp-mode . flycheck-mode))
    #+end_src
*** Smart Parens 
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package smartparens
      :hook (prog-mode . smartparens-mode))
    #+end_src
** Editing Configuration
*** Use spaces instead of tabs for indentation 
   #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
   (setq-default indent-tabs-mode nil)
   #+end_src
* Applications
** eshell
#+begin_src emacs-lisp
 
(use-package eshell
  :defer t
  :bind ([f1] . eshell-as)
  :init
  (setf eshell-directory-name (locate-user-emacs-file "local/eshell"))
  :config
  (add-hook 'eshell-mode-hook ; Bad, eshell, bad!
            (lambda ()
              (define-key eshell-mode-map (kbd "<f1>") #'quit-window))))
#+end_src


* web

** elfeed

Chris Wellon's elfeed package

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package elfeed
    :ensure t)
#+end_src
