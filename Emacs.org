
#+TITLE: Emacs config

* Preface
Currently running a bit of a cowboy setup with a manually maintaned
packages.el file that pulls certain packages from git based on specific
digests and other from the package repositories using the emacs package
manager. It's bound to end in tears.

This approach to configuration is influenced very much by David Wilson
from system crafters. It is centered around literate programming and
functional package management.

* Startup Performance
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

  ;; init.el --- -*- lexical-binding: t; -*-

  ;; The default is 800 kilobytes. Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src

* Packages

** Straight.el
Replacement for package.el. Functional package manager for emacs 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  ;; bootstrap straight.el
     (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage)) 

  ;; Emacs version >= 27
  (setq package-enable-at-startup nil)

  ;; Use by default
  (straight-use-package 'use-package)

  ;; Saves typing `:straight t` after every use-package expression  
  (setq straight-use-package-by-default t)

  ;; Clean up unused repos with `straight-remove-unused-repos'

  ;; grab the right version of org
  (straight-use-package 'org)
#+end_src
* Keep .emacs.d Clean
As seen on tv, basically moves any transitory files that are normally
plonked in the .emacs.d directory to another location
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering
  :straight t)

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src



* Ignore anything pulled in frome gnome settings
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(define-key special-event-map [config-changed-event] 'ignore)
#+end_src



* Update Load Path 

** mu4e requires the following dependencies
#+begin_src conf :tangle .config/debian/manifests/dependencies
libgmime-3.0-dev
libxapian-dev
#+end_src


** Custom lisp stuff
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (push "~/.emacs.d/lisp" load-path)  
  (require 'unannoy)
  ;;(require 'ad-mail)
  (require 'adlisp)
  (require 'mu4e)
#+end_src
* Default Coding System
use utf-8
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(set-default-coding-systems 'utf-8)
#+end_src
* Start server
  #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (server-start)
  #+end_src
* Keybindings

** Rebinds necessary 

Evil mode obscures some important key bindings in emacs. [[id:84275220-e45f-4031-9fdb-b4a41028113f][vim to emacs keybindings]] shows a list
of the important ones that I use personally most often.


#+begin_src emacs-lisp 
(global-set-key (kbd "C-x k") #'kill-this-buffer)
#+end_src

** Rebind universal argument key

Remove this for now as we try to be delivered from evil.
Evil is using C-u for scrolling, so this needs to be rebound to another variable.

#+begin_src emacs-lisp 
(global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

* Global settings

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

;; Some global keybindings
(column-number-mode)
(global-display-line-numbers-mode t)

;; Global line width
(setq-default fill-column 80)

;;; auto-mode-alist entries
(add-to-list 'auto-mode-alist '("\\.mom$" . nroff-mode))
(add-to-list 'auto-mode-alist '("[._]bash.*" . shell-script-mode))
(add-to-list 'auto-mode-alist '("Cask" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("[Mm]akefile" . makefile-gmake-mode))
(add-to-list 'auto-mode-alist '("\\.mak$" . makefile-gmake-mode))
(add-to-list 'auto-mode-alist '("\\.make$" . makefile-gmake-mode))
#+end_src

* User Interface
** unannoy 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/lisp/unannoy.el
  ;;; unannoy.el --- disable Emacs' annoying bits
  ;;; originally written by nullprogram (Chris Wellons)

  ;;; Code:
  (setf backup-inhibited t
        auto-save-default nil
        auto-save-list-file-prefix (locate-user-emacs-file "local/saves")
        inhibit-startup-message t
        initial-scratch-message nil
        wdired-allow-to-change-permissions t
        echo-keystrokes 0.1
        delete-active-region nil
        disabled-command-function nil
        custom-file (make-temp-file "emacs-custom")
        large-file-warning-threshold 536870911
        gc-cons-threshold (* 1024 1024 32)
        vc-display-status nil
        ring-bell-function (lambda ()))

  ;; GUIs are for newbs
  (menu-bar-mode -1)
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  ;; Too distracting
  (blink-cursor-mode -1)

  ;; I never want to use this
  (when (fboundp 'set-horizontal-scroll-bar-mode)
    (set-horizontal-scroll-bar-mode nil))

  ;; Do sensible clipboard things, please
  (setf select-enable-clipboard nil
        select-enable-primary t
        mouse-drag-copy-region t
        mouse-yank-at-point t)

  ;; Lexical binding by default. Must be delayed since Emacs sets this
  ;; on its own to nil after initialization.
  (run-at-time 0 nil (lambda ()
                       (setq-default lexical-binding t)))

  ;; Tabs suck
  (setq-default indent-tabs-mode nil)

  ;; I hate typing
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Always use the one true encoding
  (prefer-coding-system 'utf-8-unix)

  ;; Insert key is stupid
  (define-key global-map [(insert)] nil)
  (define-key global-map [(control insert)] 'overwrite-mode)

  ;; I hate hitting this by accident
  (global-set-key (kbd "C-<up>") #'previous-line)
  (global-set-key (kbd "C-<down>") #'next-line)

  ;; Magit is the only front-end I care about
  (setf vc-handled-backends nil
        vc-follow-symlinks t)

  ;; Stop scrolling by huge leaps
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
        scroll-conservatively most-positive-fixnum
        scroll-preserve-screen-position t)

  (provide 'unannoy)
#+end_src

* Look and feel
** Theme 

#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t
    :config
    (load-theme 'modus-vivendi)
    ;; Main typeface
    (set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 110)
    ;; Proportionally spaced typeface
    (set-face-attribute 'variable-pitch nil :family "DejaVu Serif" :height 1.0)
    ;; Monospaced typeface
    (set-face-attribute 'fixed-pitch nil :family "DejaVu Sans Mono" :height 1.0)
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil
          modus-themes-mixed-fonts nil
          modus-themes-subtle-line-numbers t
          modus-themes-intense-mouseovers nil
          modus-themes-deuteranopia t
          modus-themes-tabs-accented t
          modus-themes-variable-pitch-ui nil
          modus-themes-inhibit-reload t ; only applies to `customize-set-variable' and related

          modus-themes-fringes nil ; {nil,'subtle,'intense}

          ;; Options for `modus-themes-lang-checkers' are either nil (the
          ;; default), or a list of properties that may include any of those
          ;; symbols: `straight-underline', `text-also', `background',
          ;; `intense' OR `faint'.
          modus-themes-lang-checkers nil

          ;; Options for `modus-themes-mode-line' are either nil, or a list
          ;; that can combine any of `3d' OR `moody', `borderless',
          ;; `accented', a natural number for extra padding (or a cons cell
          ;; of padding and NATNUM), and a floating point for the height of
          ;; the text relative to the base font size (or a cons cell of
          ;; height and FLOAT)
          modus-themes-mode-line '(3d accented borderless (padding . 4) (height . 0.9))

          ;; Same as above:
          ;; modus-themes-mode-line '(accented borderless 4 0.9)

          ;; Options for `modus-themes-markup' are either nil, or a list
          ;; that can combine any of `bold', `italic', `background',
          ;; `intense'.
          modus-themes-markup '(background italic)

          ;; Options for `modus-themes-syntax' are either nil (the default),
          ;; or a list of properties that may include any of those symbols:
          ;; `faint', `yellow-comments', `green-strings', `alt-syntax'
          modus-themes-syntax nil

          ;; Options for `modus-themes-hl-line' are either nil (the default),
          ;; or a list of properties that may include any of those symbols:
          ;; `accented', `underline', `intense'
          modus-themes-hl-line '(underline accented)

          ;; Options for `modus-themes-paren-match' are either nil (the
          ;; default), or a list of properties that may include any of those
          ;; symbols: `bold', `intense', `underline'
          modus-themes-paren-match '(bold intense)

          ;; Options for `modus-themes-links' are either nil (the default),
          ;; or a list of properties that may include any of those symbols:
          ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
          ;; `bold', `italic', `background'
          modus-themes-links '(neutral-underline background)

          ;; Options for `modus-themes-box-buttons' are either nil (the
          ;; default), or a list that can combine any of `flat', `accented',
          ;; `faint', `variable-pitch', `underline', `all-buttons', the
          ;; symbol of any font weight as listed in `modus-themes-weights',
          ;; and a floating point number (e.g. 0.9) for the height of the
          ;; button's text.
          modus-themes-box-buttons '(variable-pitch flat faint 0.9)

          ;; Options for `modus-themes-prompts' are either nil (the
          ;; default), or a list of properties that may include any of those
          ;; symbols: `background', `bold', `gray', `intense', `italic'
          modus-themes-prompts '(intense bold)

          ;; The `modus-themes-completions' is an alist that reads three
          ;; keys: `matches', `selection', `popup'.  Each accepts a nil
          ;; value (or empty list) or a list of properties that can include
          ;; any of the following (for WEIGHT read further below):
          ;;
          ;; `matches' - `background', `intense', `underline', `italic', WEIGHT
          ;; `selection' - `accented', `intense', `underline', `italic', `text-also' WEIGHT
          ;; `popup' - same as `selected'
          ;; `t' - applies to any key not explicitly referenced (check docs)
          ;;
          ;; WEIGHT is a symbol such as `semibold', `light', or anything
          ;; covered in `modus-themes-weights'.  Bold is used in the absence
          ;; of an explicit WEIGHT.
          modus-themes-completions '((matches . (extrabold))
                                     (selection . (semibold accented))
                                     (popup . (accented intense)))

          modus-themes-mail-citations nil ; {nil,'intense,'faint,'monochrome}

          ;; Options for `modus-themes-region' are either nil (the default),
          ;; or a list of properties that may include any of those symbols:
          ;; `no-extend', `bg-only', `accented'
          modus-themes-region '(bg-only no-extend)

          ;; Options for `modus-themes-diffs': nil, 'desaturated, 'bg-only
          modus-themes-diffs 'desaturated

          modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

          modus-themes-org-agenda ; this is an alist: read the manual or its doc string
          '((header-block . (variable-pitch 1.3))
            (header-date . (grayscale workaholic bold-today 1.1))
            (event . (accented varied))
            (scheduled . uniform)
            (habit . traffic-light))

          modus-themes-headings ; this is an alist: read the manual or its doc string
          '((1 . (overline background variable-pitch 1.3))
            (2 . (rainbow overline 1.1))
            (t . (semibold)))))
#+end_src

** Font

#+begin_src emacs-lisp

  ;; Frames and fonts
  ;; currently disabled

  (defvar my-preferred-fonts
    '("Noto Mono-10"
      "Inconsolata-12"))

  (defun my-set-preferred-font (&optional frame)
    "Set the first available font from `my-preferred-fonts'."
    (catch 'done
      (with-selected-frame (or frame (selected-frame))
        (dolist (font my-preferred-fonts)
          (when (ignore-errors (x-list-fonts font))
            (set-frame-font font)
            (throw 'done nil))))))

  (defun my-set-frame-fullscreen (&optional frame)
    (set-frame-parameter frame 'fullscreen 'fullheight))

  (add-hook 'after-make-frame-functions #'my-set-preferred-font)
  (add-hook 'after-make-frame-functions #'my-set-frame-fullscreen t)

#+end_src

** Mode line

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package all-the-icons
    :if (display-graphic-p))

  ;; You must run (all-the-icons-install-fonts) one time after installing
  ;; this package
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  (use-package doom-modeline
    :ensure t
    :after eshell
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-intactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-ls t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e t)
    (doom-modeline-irc nil)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file.name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))
#+end_src


** Calender and planner notification stuff
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

  ;; Calendar and planner notification stuff
  (appt-activate t)
#+end_src

** Set margins (center)
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package visual-fill-column
  :config
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t))
#+end_src
  
* Usability
** Dired
    
Use dired for searching directories 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package all-the-icons-dired)

  (straight-use-package '(dired :type built-in))
  (use-package dired
    :config
    (progn
      (add-hook 'dired-mode-hook #'toggle-truncate-lines)
      (setf dired-listing-switches "-alhG"
            dired-guess-shell-alist-user
            '(("\\.pdf\\'" "evince")
              ("\\(\\.ods\\|\\.xlsx?\\|\\.docx?\\|\\.csv\\)\\'" "libreoffice")
              ("\\(\\.png\\|\\.jpe?g\\)\\'" "qiv")
              ("\\.gif\\'" "animate")))))
#+end_src

** Evil

Putting evil on hold for a while. Running into trouble with obscurificaation of built in emacs
keybindings, going to see how life is without evil for a while.

Evil mode get setup some vim style keybindings 
#+begin_src emacs-lisp 
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-search-module 'isearch)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    )

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  #+end_src
  

* Parenthesis highlighting

  #+begin_src emacs-lisp

  (use-package paren
    :config (show-paren-mode))

  (use-package rainbow-delimiters
    :defer t
    :init
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'ielm-mode-hook #'rainbow-delimiters-mode)
    :config
    (set-face-foreground 'rainbow-delimiters-depth-1-face "snow4")
    (setf rainbow-delimiters-max-face-count 1)
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground 'unspecified
                        :inherit 'error)
    (set-face-foreground 'rainbow-delimiters-depth-1-face "snow4"))

  (use-package rainbow-mode
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           js2-mode))

  (use-package browse-url
    :defer t
    :init
    (setf url-cache-directory (locate-user-emacs-file "local/url"))
    :config
    (when (executable-find "firefox")
      (setf browse-url-browser-function #'browse-url-firefox)))

      #+end_src

* Buffer management

** ibuffer

Use emacs ibuffer in place of list-buffers, this command is called with =C-x C-b=

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (global-set-key [remap list-buffers] 'ibuffer)
#+end_src

** Buffler
[[https://github.com/alphapapa/bufler.el][Buffler]] is a butler for buffers. Helps with organizing buffers according 
to a set of grouping rules.
#+begin_src emacs-lisp 
  (use-package bufler
    :disabled
    :config
    (evil-collection-define-key 'normal 'bufler-list-mode-map
         (kbd "RET") 'bufler-list-buffer-switch
         (kbd "M-RET") 'bufler-list-buffer-peek
         "D" 'bufler-list-buffer-kill)
    (setf bufler-groups
          (bufler-defgroups
           ;; Subgroup collecting all named workspaces
           (group (auto-workspace))
           ;; Subgoup collecting buffers in a projectile project.
           (group (auto-projectile))
           (group
              ;; Group all 
            (group-or "Help/Info"
                       (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                       (mode-match "*Info*" (rx bos "info-"))))
           (group
            ;; Collect all special buffers
             (group-and "*Special*"
                        (name-match "**Special**"
                                    (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                        (lambda (buffer)
                          (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                               buffer)
                                      (funcall (mode-match "Dired" (rx bos "dired"))
                                               buffer)
                                      (funcall (auto-file) buffer))
                            "*Special*"))))
            ;; group remaining buffers by major mode
           (auto-mode))))
#+end_src
* Org
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

  ;; Org mode
  (use-package org 
    :defer t
    :after (org-roam ob-go) 
    :custom
    (org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    :config
    (add-hook 'org-mode-hook
              (lambda () (add-hook 'after-save-hook #'org-babel-tangle
                                   :append :local)))

  ;; todo-keywords
    (setq org-todo-keywords
          '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
  ;; org babel

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (C . t)
       (scheme . t)
       (ruby . t)
       (go . t)
       (gnuplot . t)
       (dot . t)
       (shell . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

    (setq org-refile-targets '((nil :maxlevel . 1)
                           (org-agenda-files :maxlevel . 1)))

    ;; Capture templates
    (setq org-capture-templates
          '(("w" "Work Todo" entry (file+headline "~/Documents/org/Planner-mdw2022.org" "Tasks")
             "* TODO %?\n %i\n %a")
            ("h" "Home Todo" entry (file+headline "~/Documents/org/Planner-home2022.org" "Tasks")
             "* TODO %?\n %i\n %a")))
    (setq org-startup-folded "overview"))

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("dot" . "src dot"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("gnpl" . "src gnuplot"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
  (add-to-list 'org-structure-template-alist '("krc" . "src C"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("rb" . "src ruby"))
  (add-to-list 'org-structure-template-alist '("scm" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
  (add-to-list 'org-structure-template-alist '("yml" . "src yaml"))

#+end_src

** Org Roam

This is a bit of a hack for getting the org-roam-node-list function to work.
Currently there seems to be a problem with the way autoload works with org-roam
functions. We need the org-roam-node-list function in order to query the db for
all nodes that contain the Project tag. This chunk below just copies out the function
verbatim and calls it at runtime rather than trying to use the missing byte-compiled
version.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 
  (defun my/org-roam-node-list ()
    "Return all nodes stored in the database as a list of `org-roam-node's."
    (let ((rows (org-roam-db-query
                 "SELECT
    id,
    file,
    filetitle,
    \"level\",
    todo,
    pos,
    priority ,
    scheduled ,
    deadline ,
    title,
    properties ,
    olp,
    atime,
    mtime,
    '(' || group_concat(tags, ' ') || ')' as tags,
    aliases,
    refs
  FROM
    (
    SELECT
      id,
      file,
      filetitle,
      \"level\",
      todo,
      pos,
      priority ,
      scheduled ,
      deadline ,
      title,
      properties ,
      olp,
      atime,
      mtime,
      tags,
      '(' || group_concat(aliases, ' ') || ')' as aliases,
      refs
    FROM
      (
      SELECT
        nodes.id as id,
        nodes.file as file,
        nodes.\"level\" as \"level\",
        nodes.todo as todo,
        nodes.pos as pos,
        nodes.priority as priority,
        nodes.scheduled as scheduled,
        nodes.deadline as deadline,
        nodes.title as title,
        nodes.properties as properties,
        nodes.olp as olp,
        files.atime as atime,
        files.mtime as mtime,
        files.title as filetitle,
        tags.tag as tags,
        aliases.alias as aliases,
        '(' || group_concat(RTRIM (refs.\"type\", '\"') || ':' || LTRIM(refs.ref, '\"'), ' ') || ')' as refs
      FROM nodes
      LEFT JOIN files ON files.file = nodes.file
      LEFT JOIN tags ON tags.node_id = nodes.id
      LEFT JOIN aliases ON aliases.node_id = nodes.id
      LEFT JOIN refs ON refs.node_id = nodes.id
      GROUP BY nodes.id, tags.tag, aliases.alias )
    GROUP BY id, tags )
  GROUP BY id")))
      (cl-loop for row in rows
               append (pcase-let* ((`(,id ,file ,file-title ,level ,todo ,pos ,priority ,scheduled ,deadline
                                          ,title ,properties ,olp ,atime ,mtime ,tags ,aliases ,refs)
                                    row)
                                   (all-titles (cons title aliases)))
                        (mapcar (lambda (temp-title)
                                  (org-roam-node-create :id id
                                                        :file file
                                                        :file-title file-title
                                                        :file-atime atime
                                                        :file-mtime mtime
                                                        :level level
                                                        :point pos
                                                        :todo todo
                                                        :priority priority
                                                        :scheduled scheduled
                                                        :deadline deadline
                                                        :title temp-title
                                                        :aliases aliases
                                                        :properties properties
                                                        :olp olp
                                                        :tags tags
                                                        :refs refs))
                                all-titles)))))
#+end_src

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 

      (defun my/org-roam-filter-by-tag (tag-name)
        (lambda (node)
          (member tag-name (org-roam-node-tags node))))

      (defun my/org-roam-list-notes-by-tag (tag-name)
        (mapcar #'org-roam-node-file
                (seq-filter
                 (my/org-roam-filter-by-tag tag-name)
                 (my/org-roam-node-list))))

      (defun my/org-roam-refresh-agenda-list ()
        (interactive)
        (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))


      (use-package org-roam
        :demand t
        :straight t
        :init 
        (setq org-roam-v2-ack t)
        :custom
        (org-roam-directory "~/Notes/org-roam/")
        (org-roam-dailies-directory "journal/")
        (org-roam-completion-everywhere t)
        (org-roam-capture-templates
         '(("d" "default" plain
            "%?"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n")
            :unnarrowed t)
           ("b" "book notes" plain
            "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n")
            :unnarrowed t)
           ("p" "project" plain 
            "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n** Dates\n\n"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n#+filetags: Project\n")
            :unnarrowed t)))
        (org-roam-dailies-capture-templates
         '(("d" "default" plain 
            "\n* Thanks\n\n %?\n\n* WorkingOn\n\n* WorkingTowards\n\n* Excited About\n\n* Woes\n\n* Ideas\n\n* Housekeeping\n\n* Family Planning\n\n* Thanks"
            :if-new (file+head "%<%Y-%m-%d>.org"
                               "#+title: %<%Y-%m-%d>\n")
            :unnarrowed t)))
        :bind (("C-c n l" . org-roam-buffer-toggle)
               ("C-c n f" . org-roam-node-find)
               ("C-c n c" . org-roam-dailies-capture-today)
               :map org-mode-map
               (("C-c n i" . org-roam-node-insert)
               ("C-M-i" . completion-at-point)))
        :config
        (org-roam-db-autosync-mode)
        (my/org-roam-refresh-agenda-list))
#+end_src

** Presentations
*** org-present
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

;; center the screen

(defun ad/org-present-start ()
;; Tweak font sizes
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.0) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))
  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun ad/org-present-end ()
  (visual-fill-column-mode 0)
  (visual-line-mode 0))
  
(use-package org-present
  :config
  (add-hook 'org-present-mode-hook 'ad/org-present-start)
  (add-hook 'org-present-mode-quit-hook 'ad/org-present-end))
#+end_src

*** tree-slide
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package org-tree-slide)
    #+end_src

** graphviz
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package graphviz-dot-mode
    :ensure t
    :config
    (setq graphviz-dot-indent-width 4))
#+end_src

* Readers
** nov.el

Can't seem to get this working bug free for now. Anyway kind of fond of calibre.
#+begin_src emacs-lisp 
  (defun ad-nov-font-setup ()
    (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                                             :height 1.0))
  (add-hook 'nov-mode-hook 'ad-nov-fond-setup)

  (use-package esxml)
  (use-package nov.el
    :ensure t
    :config
    (setq nov-unzip-program (executable-find "tar")
          nov-unip-args '("-xC" directory "-f" filename))
          nov-text-width 80)

  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src
* Chat
** irc
Basic erc setup
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package erc
    :commands erc
    :config
    (setq
     erc-server "irc.libera.chat"
     erc-nick "amccart"
     erc-user-full-name "Adam McCartney"
     erc-track-shorten-start 8
     erc-auto-join-channels '(("irc.libera.chat" "#emacs"))
     erc-kill-buffer-on-part t
     erc-auto-query 'bury
     erc-fill-function 'erc-fill-static
     erc-fill-static-center 20
     erc-track-exclude '("#emacs")
     erc-track-exclude-types '("JOIN" "NICK" "QUIT" "MODE" "AWAY")
     erc-track-exclude-server-buffer t))
#+end_src
* Documentation 
** markdown 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package markdown-mode
    :defer t
    :mode ("\\.md$" "\\.markdown$" "vimperator-.+\\.tmp$")
    :config
    (add-hook 'markdown-mode-hook
              (lambda ()
                (remove-hook 'fill-nobreak-predicate
                             'markdown-inside-link-p t)))
    (add-hook 'markdown-mode-hook 'flyspell-mode)
    (add-hook 'markdown-mode-hook 'conditionally-turn-on-pandoc)
    (setf sentence-end-double-space nil
          markdown-indent-on-enter nil
          markdown-command
          "pandoc -f markdown -t html"))
#+end_src

*** imenu-list
This is useful for creating an imenu list of headings in a markdown document.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package imenu-list
    :ensure t
    :bind (("C-'" . imenu-list-smart-toggle))
    :config
    (setq imenu-list-focus-after-activation t
        imenu-list-auto-resize nil))
#+end_src

** pandoc

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package pandoc-mode
    :ensure t)
#+end_src

* Completion & searching 


** Vertico
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** consult

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package consult
    :ensure t)
#+end_src

** orderless
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** YASnippet
   #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
   (use-package yasnippet)
   #+end_src

** corfu
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)       ;; Enable cylcing for 'corfu-next/previous
    (corfu-auto t)        ;; Enable auto completion
    (corfu-separator ?\s) ;; Orderless field seperator
    (corfu-quit-at-boundary nil) ;; Never quit at completion boundary.
    (corfu-echo-documentation t) ;; Show doumentation in the echo area

    ;; Enable Corfu globally
    :init
    (global-corfu-mode))
#+end_src

** emacs
From corfu readme
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package emacs
    :init
    ;; TAB cycle if there are only a few candidates
    (setq completion-cycle-threshold 3)

    ;; Hide commands in M-x which do not apply to the current mode
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; completion-at-point is often bound to M-TAB
    (setq tab-always-indent 'complete))
#+end_src

** dabbrev
Again from the corfu readme, recommended to use with corfu
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package dabbrev
    :ensure t
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    ;; Other useful Dabbrev configurations.
    :custom
    (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

** dumb jump

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package dumb-jump
    :ensure t)

  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
#+end_src

** hydra
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package hydra
    :ensure t)
#+end_src

*** Window moving hydra
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (global-set-key
   (kbd "C-M-o")
    (defhydra hydra-window ()
      "window"
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("v" (lambda ()
        (interactive)
        (split-window-right)
        (windmove-right))
        "vert")
      ("x" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down))
         "horz")
      ("o" delete-other-windows "one" :color blue)
      ("a" ace-window "ace")
      ("s" ace-swap "swap")
      ("d" ace-delete-window "ace-one" :color blue)
      ("b" ido-switch-buffer "buf")
      ("m" headlong-bookmark "buf")
      ("q" nil "cancel")))
#+end_src
      
** Dap Mode
Emacs Debug Adapter Protocol aka DAP Mode means we can debug programs. Pfff...what sort of a
shoddy developer needs a debugger, eh?!

The following config is from https://github.com/neppramod/java_emacs/blob/master/emacs-configuration.org

Below we will integrate dap-mode with dap-hydra. Dap-hydra shows keys you can use to enable various
options and jump through code at runtime. After we install dap-mode we will also install dap-java.

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package dap-mode
    :ensure t
    :after (lsp-mode)
    :functions dap-hydra/nil
    :bind (:map lsp-mode-map
           ("<f5>" . dap-debug)
           ("M-<f5>" . dap-hydra))
    :hook ((dap-mode . dap-ui-mode)
      (dap-session-created . (lambda (&_rest) (dap-hydra)))
      (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))

  (require 'dap-gdb-lldb)
  (require 'dap-python)

#+end_src

** Treemacs
Treemacs provides UI elements used for LSP UI. M-9 shows error list. 

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 
  (use-package lsp-treemacs
    :after (lsp-mode treemacs)
    :ensure t
    :commands lsp-treemacs-errors-list
    :bind (:map lsp-mode-map
           ("M-9" . lsp-treemacs-errors-list)))
#+end_src

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package treemacs
    :ensure t
    :commands (treemacs)
    :after (lsp-mode))  
#+end_src


*** Treemacs evil
We are of course evil
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package treemacs-evil)
#+end_src


*** Treemacs projectile
This will quickly add projectile projects to Treemacs
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package treemacs-projectile)
#+end_src

** lsp
Haven't really got this running so smoothly yet, find nvim's lsp stuff
works a bit better out of the box. 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package lsp-mode 
    :init 
    (setq lsp-keymap-prefix "C-c l")
    :hook ((python-mode . lsp)
           (c-mode . lsp)
           ((typescript-mode js2-mode web-mode) . lsp)
           (docker-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :after lsp
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t)
    (lsp-ui-doc-show))

  ;;(use-package lsp-ivy)
#+end_src

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
   (setq which-key-idle-delay 1))
#+end_src

*** Eglot

Take eglot out for a spin.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 
  (use-package eglot
    :ensure t
    :hook
    (python-mode-hook . eglot-ensure)
    :config
    (setq eglot-autoshutdown t))
  
#+end_src

*** Language Servers
**** pyright

Shelve this for the time being
     #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
     (use-package lsp-pyright
       :after lsp-mode
       :custom
       (lsp-pyright-auto-import-completions nil)
       (lsp-pyright-typechecking-mode "off")
       :ensure t
       :hook (python-mode . (lambda ()
                              (require 'lsp-pyright)
                              (lsp))))
     #+end_src

* Development
** Magit
Very nice interface for Git.    

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package magit
  :straight t
  :init (if (not (boundp 'project-switch-commands)) 
        (setq project-switch-commands nil))
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

;;(use-package lsp-pyright
;;  :straight t 
;;  :hook (python-mode . (lambda ()
;;                          (require 'lsp-pyright)
;;                          (lsp)))) ;; or lsp-deferred

#+end_src

** Languages 
   
Various packages and dependencies that make working with certain
languages a bit easier.
   
*** gnuplot
We need to add a couple of packages related to gnuplot to get emacs to reconize it on the system.
I'm possibly adding redundency here, but who doesn't love a bit of redundency?!

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package gnuplot-mode)
  (use-package gnuplot)
#+end_src

*** html

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx|jsx\\)\\'"
    :config
    (setq-default web-mode-code-indent-ofset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))
#+end_src
*** lisp

To access some functions such as first or second in elisp, common lisp is required.
This is used by org-mode dot. Not sure if this will cause conflicts.
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 
  (require 'cl-lib)
#+end_src
 
Add slime that uses the sbcl 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package slime
  :init 
  (setq inferior-lisp-program "/usr/local/bin/sbcl"))
#+end_src

*** python
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package python-mode
    :mode "\\.py\\'"
    :hook (python-mode . lsp-deferred)
    :init
    (setq python-shell-interpreter "python3")
    :config
    (setq python-indent-level 4))
#+end_src

**** Jedi mode for company

#+begin_src emacs-lisp 
  (use-package company-jedi
    :ensure t
    :after company)

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'my/python-mode-hook)
#+end_src

**** pyvenv
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el 
  (use-package pyvenv
   :ensure t
   :after python-mode)
#+end_src

**** pytest
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package python-test
    :after python-mode)
#+end_src

*** typescript
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
  
(defun dw/set-js-indentation ()
  (setq js-indent-level 2)
  (setq evil-shift-width js-indent-level)
  (setq-default tab-width 2))

(use-package js2-mode
  :mode "\\.jsx?\\'"
  :config
  ;; Use js2-mode for Node scripts
  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil)

  ;; Set up proper indentation in JavaScript and JSON files
  (add-hook 'js2-mode-hook #'dw/set-js-indentation)
  (add-hook 'json-mode-hook #'dw/set-js-indentation))
#+end_src

*** scheme 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el

(use-package geiser
  :straight t
  :config
  (setq geiser-default-implementation 'guile)
  (setq geiser-active-implementations '(guile))
  (setq geiser-implementations-alist '(((regexp "\\.scm$") guile)))
  (setq geiser-guile-binary "/usr/bin/guile"))

(use-package geiser-guile
  :straight t)
#+end_src

Add guile and mit scheme
#+begin_src conf :tangle .config/debian/manifests/interpreters
guile-3.0
mit-scheme
#+end_src

*** c
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package cc-mode
    :defer t
    :hook (cc-mode . lsp-deferred)
    :init
    (defun my/c-hook ()
      (setf c-basic-offset 8)   ;; follow linux kernel style guide
      (c-set-offset 'case-label '+)
      (c-set-offset 'access-label '/)
      (c-set-offset 'label '/))
    :config
    (progn
      (define-key java-mode-map (kbd "C-x I") 'add-java-import)
      (add-hook 'c-mode-hook #'my/c-hook)
      (add-hook 'c++-mode-hook #'my/c-hook)
      (add-to-list 'c-default-style '(c-mode . "k&r"))
      (add-to-list 'c-default-style '(c++-mode . "k&r"))))

#+end_src

*** Go
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package go-mode
  :hook (go-mode . lsp-deferred))
#+end_src

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
(use-package ob-go)
#+end_src

*** Lilypond
todo
#+begin_src emacs-lisp
  
  (require 'lilypond-mode)
#+end_src
*** x86 assembly 
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package nasm-mode
    :defer t
    :mode ("\\.nasm$" "\\.asm$" "\\.s$")
    :config
    (add-hook 'nasm-mode-hook (lambda () (setf indent-tabs-mode t))))

  (use-package asm-mode
    :defer t
    :init
    (add-hook 'asm-mode-hook (lambda () (setf indent-tabs-mode t
                                              tab-always-indent t))))

  (use-package x86-lookup
    :defer t
    :init
    (setq x86-lookup-pdf '"~/Documents/bookstaging/325383-sdm-vol-2abcd.pdf")
    (global-set-key (kbd "C-h x") #'x86-lookup))
#+end_src

*** yaml
Everyone's favorite...
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package yaml-mode
       :mode "\\.ya?ml\\'")
    #+end_src
    

*** Dockerfile

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package dockerfile-mode
    :ensure t)
#+end_src

* Debuggers
*** gdb setup
Emacs integrates really nicely with gdb, in particular it has a sweet many windows mode that gives
really nice UI for beduggin!
#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (setq gdb-many-windows t)
#+end_src
* Productivity
** Flycheck
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
      (use-package flycheck
        :defer t
        :hook
        (eglot . flycheck-mode))
    #+end_src
** Smart Parens 
    #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
    (use-package smartparens
      :hook (prog-mode . smartparens-mode))
    #+end_src
** Editing Configuration
*** Use spaces instead of tabs for indentation 
   #+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
   (setq-default indent-tabs-mode nil)
   #+end_src
* Applications
** eshell
#+begin_src emacs-lisp
 
(use-package eshell
  :defer t
  :bind ([f1] . eshell-as)
  :init
  (setf eshell-directory-name (locate-user-emacs-file "local/eshell"))
  :config
  (add-hook 'eshell-mode-hook ; Bad, eshell, bad!
            (lambda ()
              (define-key eshell-mode-map (kbd "<f1>") #'quit-window))))
#+end_src


* readers

** elfeed

Chris Wellon's elfeed package

#+begin_src emacs-lisp :tangle emacs/.emacs.d/init.el
  (use-package elfeed
    :ensure t
    :config
    (setq elfeed-feeds
          '("https://nullprogram.com/feed/"
            "https://drewdevault.com/blog/index.xml")))
#+end_src
